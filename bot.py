import threading
from flask import Flask
import telebot
from telebot import types
import json
import datetime
import os

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
TOKEN = "8204880484:AAHZKpUgPBl_hJj_ZQ8HaEczn1dg6njuxZo"
ADMIN_ID = 7816374758  # üîπ –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
CHANNEL_USERNAME = "@wnref"  # üîπ –Ω–∞–ø—Ä–∏–º–µ—Ä @SpinFortunaNews
SUPPORT_LINK = "@winiksona"

bot = telebot.TeleBot(TOKEN)
DATA_FILE = "data.json"
WITHDRAW_FILE = "withdraws.json"

# ==== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====
for file in [DATA_FILE, WITHDRAW_FILE]:
    if not os.path.exists(file):
        with open(file, "w") as f:
            json.dump({}, f)

def load_json(filename):
    with open(filename, "r") as f:
        return json.load(f)

def save_json(filename, data):
    with open(filename, "w") as f:
        json.dump(data, f, indent=2)

def is_subscribed(user_id):
    try:
        chat_member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return chat_member.status in ["member", "administrator", "creator"]
    except:
        return False

# ==== /START ====
@bot.message_handler(commands=["start"])
def start(message):
    user_id = str(message.chat.id)
    args = message.text.split()
    data = load_json(DATA_FILE)

    if user_id not in data:
        data[user_id] = {
            "balance": 0,
            "withdrawn": 0,
            "referrals": 0,
            "joined": str(datetime.date.today()),
            "invited_by": args[1] if len(args) > 1 else None,
            "ref_counted": False
        }
        save_json(DATA_FILE, data)

    if not is_subscribed(message.chat.id):
        send_subscribe_message(message.chat.id)
        return

    if data[user_id].get("invited_by") and not data[user_id].get("ref_counted"):
        ref_id = data[user_id]["invited_by"]
        if ref_id in data and ref_id != user_id:
            data[ref_id]["balance"] += 1000
            data[ref_id]["referrals"] += 1
            data[user_id]["ref_counted"] = True
            save_json(DATA_FILE, data)
            bot.send_message(int(ref_id), "üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª! +1000 Gram")

    main_menu(message)

def send_subscribe_message(chat_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME[1:]}"),
        types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")
    )
    bot.send_message(chat_id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëá", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "check_sub")
def check_subscription(call):
    user_id = str(call.message.chat.id)
    data = load_json(DATA_FILE)
    if is_subscribed(call.message.chat.id):
        bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        if data[user_id].get("invited_by") and not data[user_id].get("ref_counted"):
            ref_id = data[user_id]["invited_by"]
            if ref_id in data and ref_id != user_id:
                data[ref_id]["balance"] += 1000
                data[ref_id]["referrals"] += 1
                data[user_id]["ref_counted"] = True
                save_json(DATA_FILE, data)
                bot.send_message(int(ref_id), "üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª! +1000 Gram")
        main_menu(call.message)
    else:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!")

# ==== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ====
def main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å", "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    markup.row("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üì¢ –ö–∞–Ω–∞–ª")
    if message.chat.id == ADMIN_ID:
        markup.row("üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

# ==== –ó–ê–†–ê–ë–û–¢–ê–¢–¨ ====
@bot.message_handler(func=lambda m: m.text == "üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å")
def earn(message):
    ref_link = f"https://t.me/{bot.get_me().username}?start={message.chat.id}"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìã –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", url=ref_link))
    bot.send_message(message.chat.id, f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\nüí∏ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ ‚Äî 1000 Gram", reply_markup=markup)

# ==== –ü–†–û–§–ò–õ–¨ ====
@bot.message_handler(func=lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def profile(message):
    user_id = str(message.chat.id)
    data = load_json(DATA_FILE)[user_id]
    text = f"""üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
ID: {user_id}
–ù–∏–∫: {message.from_user.first_name}
–ë–∞–ª–∞–Ω—Å: {data['balance']} Gram
–í—ã–≤–µ–¥–µ–Ω–æ: {data['withdrawn']} Gram
–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {data['referrals']}"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üí∏ –í—ã–≤–µ—Å—Ç–∏", "‚¨Ö –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, text, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "‚¨Ö –ù–∞–∑–∞–¥")
def back_to_menu(message):
    main_menu(message)

# ==== –í–´–í–û–î ====
@bot.message_handler(func=lambda m: m.text == "üí∏ –í—ã–≤–µ—Å—Ç–∏")
def withdraw_request(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω. 500 Gram):")
    bot.register_next_step_handler(msg, process_withdraw)

def process_withdraw(message):
    user_id = str(message.chat.id)
    try:
        amount = int(message.text)
        data = load_json(DATA_FILE)
        if amount < 500:
            bot.send_message(message.chat.id, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ ‚Äî 500 Gram")
            return
        if amount > data[user_id]["balance"]:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            return

        data[user_id]["balance"] -= amount
        save_json(DATA_FILE, data)

        withdraws = load_json(WITHDRAW_FILE)
        withdraws[user_id] = {"amount": amount, "status": "pending"}
        save_json(WITHDRAW_FILE, withdraws)

        bot.send_message(message.chat.id, "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É.")
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{user_id}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{user_id}")
        )
        bot.send_message(
            ADMIN_ID,
            f"üí∏ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\nID: {user_id}\n–°—É–º–º–∞: {amount}",
            reply_markup=markup
        )
    except:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_") or call.data.startswith("decline_"))
def handle_withdraw_action(call):
    user_id = call.data.split("_")[1]
    withdraws = load_json(WITHDRAW_FILE)
    data = load_json(DATA_FILE)

    if call.data.startswith("decline_"):
        if user_id in withdraws and withdraws[user_id]["status"] == "pending":
            amount = withdraws[user_id]["amount"]
            data[user_id]["balance"] += amount
            withdraws[user_id]["status"] = "declined"
            save_json(DATA_FILE, data)
            save_json(WITHDRAW_FILE, withdraws)
            bot.edit_message_text("‚ùå –í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", call.message.chat.id, call.message.id)
            bot.send_message(int(user_id), f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {amount} Gram –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
    elif call.data.startswith("approve_"):
        if user_id in withdraws and withdraws[user_id]["status"] == "pending":
            withdraws[user_id]["status"] = "awaiting_receipt"
            save_json(WITHDRAW_FILE, withdraws)
            msg = bot.send_message(ADMIN_ID, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
            bot.register_next_step_handler(msg, send_receipt_to_user, user_id)

def send_receipt_to_user(message, user_id):
    receipt_link = message.text
    withdraws = load_json(WITHDRAW_FILE)
    data = load_json(DATA_FILE)
    if user_id in withdraws:
        amount = withdraws[user_id]["amount"]
        withdraws[user_id]["status"] = "approved"
        data[user_id]["withdrawn"] += amount
        save_json(DATA_FILE, data)
        save_json(WITHDRAW_FILE, withdraws)
        bot.send_message(int(user_id), f"‚úÖ –í–∞—à –≤—ã–≤–æ–¥ {amount} Gram –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫: {receipt_link}")
        bot.send_message(ADMIN_ID, "‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

# ==== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====
@bot.message_handler(func=lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def stats(message):
    data = load_json(DATA_FILE)
    users = len(data)
    start_date = min([d["joined"] for d in data.values()]) if users else "–°–µ–≥–æ–¥–Ω—è"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üî• –•–æ—á—É —Ç–∞–∫–æ–≥–æ –∂–µ –±–æ—Ç–∞", url="https://t.me/—Ç–≤–æ—è_—Å—Å—ã–ª–∫–∞"))
    text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {start_date}
–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}
–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: {SUPPORT_LINK}"""
    bot.send_message(message.chat.id, text, reply_markup=markup)

# ==== –ö–ê–ù–ê–õ ====
@bot.message_handler(func=lambda m: m.text == "üì¢ –ö–∞–Ω–∞–ª")
def channel(message):
    bot.send_message(message.chat.id, f"–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª üëâ {CHANNEL_USERNAME}")

# ==== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ====
@bot.message_handler(func=lambda m: m.text == "üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" and m.chat.id == ADMIN_ID)
def admin_panel(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üì¨ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
    markup.row("‚¨Ö –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=markup)

print("ü§ñ Bot started...")
bot.infinity_polling(skip_pending=True)

